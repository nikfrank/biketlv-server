{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["EditLaneRaw","_ref","lane","deprecateLane","updateLaneStatus","onChange","react_default","a","createElement","className","onClick","id","then","e","target","value","status","hooks","fetch","res","json","method","headers","Content-Type","body","JSON","stringify","payload","EditLane","connectHooks","colorPerStatus","good","ok","bad","lanes","coords","street","addressStart","addressFinish","App","state","lat","lng","zoom","currentLane","adding","refreshLanes","_this","props","getLanes","find","l","setState","clickLine","laneIndex","originalEvent","view","L","DomEvent","stopPropagation","onZoomend","_ref2","_zoom","startAddLine","clickMap","_ref3","_ref3$latlng","latlng","concat","length","createLane","this","_this2","position","_this$state","_this$props$lanes","currentLaneObj","Map","center","TileLayer","attribution","url","map","_ref4","Polyline","key","weight","Math","max","color","positions","Component","getLanesDEP","Promise","resolve","b","Object","objectSpread","startLat","startLng","endLat","endLng","catch","pon","Boolean","window","location","hostname","match","HookedApp","hooker","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2dc8eaf7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\n\nimport { Map, TileLayer, Polyline } from 'react-leaflet';\n\nimport connectHooks from 'react-hooker';\n\nconst endpoint = process.env.NODE_ENV === 'development' ? (\n  'http://localhost:8000'\n) : ( '' );\n\nconst EditLaneRaw = ({ lane, deprecateLane, updateLaneStatus, onChange })=> (\n  <div className='edit-lane'>\n    <div>\n      <button onClick={()=> deprecateLane(lane.id).then(onChange)}>Deprecate</button>\n    </div>\n    <label>\n      status:\n      <select onChange={(e)=> updateLaneStatus(lane.id, e.target.value).then(onChange)} value={lane.status}>\n        <option value='bad'>bad</option>\n        <option value='ok'>ok</option>\n        <option value='good'>good</option>\n      </select>\n    </label>\n  </div>\n);\n\nEditLaneRaw.hooks = {\n  deprecateLane: id=> fetch(endpoint + '/lane/deprecate/' +id)\n    .then(res=> res.json()),\n\n  updateLaneStatus: (id, status)=> fetch(endpoint + '/lane/' + id, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ payload: { status } }),\n  }),\n};\n\nconst EditLane = connectHooks( EditLaneRaw );\n\n\nconst colorPerStatus = {\n  good: 'lime',\n  ok: 'orange',\n  bad: 'red',\n};\n\n\nconst lanes = [\n  {\n    coords: [[32.078, 34.7815], [32.082, 34.7815]],\n    status: 'good',\n    street: 'dizengoff',\n    addressStart: 100,\n    addressFinish: 120,\n  },\n  {\n    coords: [[32.074, 34.782], [32.078, 34.7815]],\n    status: 'ok',\n    street: 'dizengoff',\n    addressStart: 80,\n    addressFinish: 99,\n  },\n];\n\nclass App extends Component {\n\n  static hooks = {\n    getLanesDEP: ()=> Promise.resolve({ lanes }),\n    getLanes: ()=>\n      fetch(endpoint + '/lane')\n        .then(res => res.json())\n        .then(lanes => ({\n          lanes: lanes.map(b=> ({\n            ...b,\n            coords: [[ b.startLat, b.startLng ], [ b.endLat, b.endLng ]],\n          }) )\n        }))\n        .catch(e => ({ lanes }) ),\n\n    createLane: (coords)=>\n      fetch(endpoint + '/lane', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          payload: {\n            status: 'ok',\n            street: 'dizengoff',\n            addressStart: 80,\n            addressFinish: 99,\n            startLat: coords[0][0],\n            startLng: coords[0][1],\n            endLat: coords[1][0],\n            endLng: coords[1][1],\n          }\n        })\n      }).then(res => res.json())\n        .then(pon => ({})),\n  }\n  \n  state = {\n    lat: 32.08,\n    lng: 34.78,\n    zoom: 15,\n\n    currentLane: null,\n    adding: null,\n  }\n\n  componentDidMount(){\n    this.props.getLanes();\n  }\n\n  refreshLanes = ()=>{\n    this.props.getLanes().then(()=>{\n      if( this.state.currentLane === null ) return;\n\n      if( !this.props.lanes.find( l=> l.id === this.state.currentLane ) )\n        this.setState({ currentLane: null });\n    })\n  }\n  \n  clickLine = (e, laneIndex)=> {\n    e.originalEvent.view.L.DomEvent.stopPropagation(e);\n    this.setState({ currentLane: laneIndex });\n  }\n\n  onZoomend = ({ target: { _zoom } })=> this.setState({ zoom: _zoom })\n\n  startAddLine = ()=> this.setState({ adding: [] })\n\n  clickMap = ({ latlng: { lat, lng } })=>\n    this.state.adding ? (\n      this.setState( state => ({\n        adding: state.adding.concat([[ lat, lng ]]),\n      }), ()=>\n        ( this.state.adding.length === 2 ) &&\n             this.props.createLane( this.state.adding )\n                 .then(()=> this.setState({ adding: null }))\n                 .then(()=> this.props.getLanes())\n      )\n    ) : (\n      this.setState({ currentLane: null })\n    )\n  \n  render() {\n    const position = [ this.state.lat, this.state.lng ];\n  \n    const { currentLane, zoom } = this.state;\n    const { lanes=[] } = this.props;\n\n    const currentLaneObj = lanes.find(l => l.id === currentLane );\n    \n    return (\n      <div className=\"App\">\n\n        <div className='control-panel'>\n          <div>\n            <button onClick={this.startAddLine}>+</button>\n          </div>\n          <div>\n            {\n              ((currentLane === null) || (!currentLaneObj)) ? null : (\n                <EditLane lane={currentLaneObj} onChange={this.refreshLanes}/>\n              )\n            }\n          </div>\n        </div>\n        \n        <Map center={position}\n             onZoomend={this.onZoomend}\n             onClick={this.clickMap}\n             zoom={zoom}>\n          <TileLayer\n            attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          {\n            lanes.map(({ coords, status, id })=> (\n              <Polyline key={id}\n                        weight={Math.max(3, 6*zoom-83)}\n                        color={colorPerStatus[status]}\n                        positions={coords}\n                        onClick={(e)=> this.clickLine(e, id)}/>   \n            ))\n          }\n        </Map>\n        \n      </div>\n);\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport hooker from 'react-hooker';\nconst HookedApp = hooker(App);\n\nReactDOM.render(<HookedApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}